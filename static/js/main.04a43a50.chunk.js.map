{"version":3,"sources":["context.js","components/contacts/Contact.js","components/contacts/Contacts.js","components/layout/Header.js","components/layout/TextInputgroup.js","components/contacts/AddContact.js","components/pages/About.js","components/pages/NotFound.js","components/pages/Test.js","components/contacts/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","reducer","state","action","type","contacts","payload","map","contact","id","filter","Provider","dispatch","setState","axios","get","res","this","data","value","props","children","Component","Consumer","Contact","showContactInfo","onShowClick","event","console","log","onDeleteClicHander","a","delete","name","email","phone","contactinfo","className","style","cursor","onClick","float","color","bind","to","marginRight","Contacts","Fragment","key","Header","branding","defaultProps","TextInputgroup","label","placeholder","onChange","error","htmlFor","classnames","AddContact","errors","target","onSubmit","e","preventDefault","newContact","post","history","push","About","NotFound","Test","title","fetch","then","response","json","body","EditContact","match","params","updateContact","put","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.04a43a50.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nconst Context = React.createContext();\r\n\r\nconst reducer = (state, action) => {\r\n    switch(action.type) {\r\n        \r\n        case 'ADD_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: [action.payload, ...state.contacts]\r\n            }\r\n        \r\n        case 'UPDATE_CONTACT':\r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.map(\r\n                        contact => contact.id === action.payload.id ? (contact = action.payload) : contact\r\n                    )\r\n            }\r\n        \r\n        case 'DELETE_CONTACT':        \r\n            return {\r\n                ...state,\r\n                contacts: state.contacts.filter(contact => contact.id !== action.payload)\r\n            }\r\n        \r\n        default:\r\n            return state;\r\n    }       \r\n}\r\n\r\nexport class Provider extends Component{\r\n    state = {\r\n        contacts: [],\r\n        dispatch: action => this.setState(state => reducer(state, action))\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const res = await axios.get('https://jsonplaceholder.typicode.com/users')\r\n        \r\n        this.setState({\r\n            contacts: res.data\r\n        })\r\n        // .then(res=>{\r\n            \r\n        // })\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <Context.Provider value={this.state}>\r\n                { this.props.children }\r\n            </Context.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport const Consumer = Context.Consumer;\r\n\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { Consumer } from '../../context';\r\nimport axios from 'axios';\r\n\r\nclass Contact extends Component {\r\n\r\n    state = {\r\n        showContactInfo: false\r\n    }\r\n\r\n    onShowClick = (event) => {\r\n        console.log(this.state)\r\n        const { showContactInfo } = this.state;\r\n\r\n        this.setState({\r\n            showContactInfo: !showContactInfo\r\n        })\r\n    }\r\n\r\n    onDeleteClicHander = async (id, dispatch) => {\r\n        try{\r\n            await axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\r\n            dispatch({type: 'DELETE_CONTACT', payload: id})\r\n        }\r\n        catch(e){\r\n            console.log(e);\r\n        }\r\n        \r\n    }\r\n    \r\n    render(){\r\n        const { id, name, email, phone } = this.props.contact;\r\n\r\n        let contactinfo = null;\r\n        if(this.state.showContactInfo){\r\n            contactinfo = (\r\n                <ul className=\"list-group\">\r\n                    <li className=\"list-group-item\">{email}</li>\r\n                    <li className=\"list-group-item\">Phone: {phone}</li>\r\n                </ul>  \r\n            )\r\n        }\r\n\r\n        \r\n        return (\r\n            <Consumer>\r\n                {\r\n                    value => {\r\n                        const { dispatch } = value;\r\n\r\n                        return (\r\n                            <div className=\"card card-body mb-3\">\r\n                            <h4>\r\n                                {name}\r\n                                <i className=\"fas fa-sort-down\" style={{cursor: 'pointer'}} onClick={this.onShowClick} />\r\n                                <i className=\"fas fa-times\" style={{cursor: 'pointer', float: \"right\", color: \"red\"}} onClick={this.onDeleteClicHander.bind(this, id, dispatch)} />\r\n                                <Link to={`/contact/edit/${id}`}>\r\n                                    <i className=\"fas fa-pencil-alt\" style={{cursor: 'pointer', float: \"right\", color: \"black\", marginRight: '15px'}} />\r\n                                </Link>\r\n                                \r\n                            </h4>\r\n                            { contactinfo }\r\n                        </div>\r\n                        )\r\n                        \r\n                    }\r\n                }\r\n            </Consumer>\r\n            \r\n        )\r\n    }\r\n    \r\n}\r\n\r\nContact.propTypes = {\r\n    contact: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Contact;","import React, { Component } from 'react';\r\nimport Contact from './Contact';\r\nimport { Consumer } from '../../context';\r\n\r\nclass Contacts extends Component {\r\n\r\n    // static propTypes = {\r\n    //     name: PropTypes.string.isRequired,\r\n    //     email: PropTypes.string.isRequired,\r\n    //     phone: PropTypes.string.isRequired\r\n    // }\r\n    \r\n    \r\n \r\n    // onDeleteContact = (id) =>{\r\n    //     // console.log('onDeleteContact'+ id);\r\n\r\n    //     const { contacts } = this.state;\r\n\r\n    //     const newContacts = contacts.filter((contact) => contact.id !== id)\r\n\r\n    //     this.setState({\r\n    //         contacts: newContacts\r\n    //     });\r\n    // }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Consumer>\r\n                { value => {\r\n                    const { contacts } = value;\r\n                    return <React.Fragment>\r\n                        <h3 className=\"display-8 mb-2 text-danger\">\r\n                            Contact List\r\n                        </h3>\r\n                        {\r\n                            contacts.map( (contact) => {\r\n                                return <Contact key={contact.id} contact={contact} />\r\n                            } )\r\n                        }\r\n                    </React.Fragment>\r\n                } }\r\n            </Consumer>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Contacts;","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Header = (props) => {\r\n    \r\n    const { branding } = props;\r\n    return (\r\n        // <div>\r\n        //     <h1>{branding}</h1>            \r\n        // </div>\r\n\r\n        <nav className=\"navbar navbar-expand-sm navbar-dark bg-danger mb-3 py-0\">\r\n            <Link to=\"/\" className=\"navbar-brand\">\r\n                {branding}\r\n            </Link>\r\n            <div>\r\n                <ul className=\"navbar-nav mr-auto\">\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/\" className=\"nav-link\">Home</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/about\" className=\"nav-link\">About</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/contact/add\" className=\"nav-link\">Add Contact</Link>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <Link to=\"/test\" className=\"nav-link\">Test</Link>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n            \r\n        </nav>\r\n        \r\n    )\r\n}\r\n\r\nHeader.defaultProps = {\r\n    branding: 'My App'\r\n}\r\n\r\nHeader.propTypes = {\r\n    branding: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\n\r\n\r\nconst TextInputgroup = (\r\n    {label, \r\n    name, \r\n    value,\r\n    placeholder,\r\n    type,\r\n    onChange,\r\n    error }\r\n) => {\r\n\r\n    return (\r\n        <div className=\"form-group\">\r\n            <label htmlFor={name}>{label}</label>\r\n            <input \r\n                value={value} \r\n                id={name} \r\n                type={type} \r\n                name={name} \r\n                placeholder={placeholder}\r\n                className={ classnames(\r\n                    'form-control form-control-lg',\r\n                    {\r\n                        'is-invalid': error\r\n                    }\r\n                    ) } //\"is-invalid form-control form-control-lg\" \r\n                onChange={onChange} />\r\n                { error && <div className=\"invalid-feedback\">{error}</div>}\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nTextInputgroup.defaultProps = {\r\n    type: 'text'\r\n}\r\n\r\nTextInputgroup.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    label: PropTypes.string.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string.isRequired,\r\n    type: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    error: PropTypes.string\r\n}\r\n\r\nexport default TextInputgroup;","import React, { Component } from 'react'\r\nimport { Consumer } from '../../context';\r\nimport TextInputgroup from \"../layout/TextInputgroup\";\r\nimport axios from 'axios';\r\n\r\nclass AddContact extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        errors:{}\r\n    }\r\n\r\n    onChange = (event) => this.setState({[event.target.name]: event.target.value})\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        console.log(this.state)\r\n        const { name, email, phone } = this.state;\r\n\r\n        if(name === ''){\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n\r\n        if(email === ''){\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n\r\n        if(phone === ''){\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n        // Create a contact object\r\n        const newContact = {\r\n            name: name,\r\n            email: email,\r\n            phone: phone\r\n        }\r\n\r\n        const res = await axios.post('https://jsonplaceholder.typicode.com/users', newContact)\r\n        dispatch({type: 'ADD_CONTACT', payload: res.data});\r\n        \r\n\r\n        // Clear state after submitting form\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n        \r\n        this.props.history.push('/');\r\n    }\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {\r\n                    value => {\r\n                        const { dispatch } = value;\r\n                        return (\r\n                            <div className=\"card mb-3\">\r\n                                <div className=\"card-header\">Add Contact</div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n\r\n                                        <TextInputgroup \r\n                                            label=\"Name\" \r\n                                            value={name} \r\n                                            name=\"name\" \r\n                                            placeholder=\"Enter name\" \r\n                                            onChange={this.onChange} \r\n                                            error= {errors.name}\r\n                                        />\r\n\r\n                                        <TextInputgroup \r\n                                            label=\"Email\"  \r\n                                            value={email} \r\n                                            name=\"email\" \r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter email\" \r\n                                            onChange={this.onChange} \r\n                                            error= {errors.email}\r\n                                        />\r\n\r\n                                        <TextInputgroup \r\n                                            label=\"Phone\"  \r\n                                            value={phone} \r\n                                            name=\"phone\" \r\n                                            placeholder=\"Enter phone\" \r\n                                            onChange={this.onChange} \r\n                                            error= {errors.phone}\r\n                                        />\r\n                                        {/* <div className=\"form-group\">\r\n                                            <label htmlFor=\"name\">Name</label>\r\n                                            <input \r\n                                                value={name} \r\n                                                id=\"name\" \r\n                                                type=\"text\" \r\n                                                name=\"name\" \r\n                                                placeholder=\"Enter name\" \r\n                                                className=\"form-control form-control-lg\" \r\n                                                onChange={this.onChange} />\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"email\">Email</label>\r\n                                            <input \r\n                                                value={email} \r\n                                                id=\"email\" \r\n                                                type=\"email\" \r\n                                                name=\"email\" \r\n                                                placeholder=\"Enter email\" \r\n                                                className=\"form-control form-control-lg\" \r\n                                                onChange={this.onChange} />\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"phone\">Phone</label>\r\n                                            <input \r\n                                                value={phone} \r\n                                                id=\"phone\" \r\n                                                type=\"text\" \r\n                                                name=\"phone\" \r\n                                                placeholder=\"Enter phone\" \r\n                                                className=\"form-control form-control-lg\" \r\n                                                onChange={this.onChange} />\r\n                                        </div> */}\r\n                                        <input type=\"submit\" value=\"Add Contact\" className=\"btn btn-light btn-block\" />\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                }\r\n            </Consumer>\r\n        )\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default AddContact;\r\n","import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <div className=\"card-body mb-3\">\r\n            <h1 className=\"display-4\">About contact manager</h1>\r\n            <p className=\"lead\">\r\n                Simple app to manage the contact.\r\n            </p>\r\n            <p className=\"text-secondary\">\r\n                Version 1.0.0\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;\r\n","import React from 'react'\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <div className=\"card-body\">\r\n            <h1 className=\"display-4\">\r\n                <span className=\"text-danger\">404</span> Page Not Found\r\n            </h1>\r\n            <p className=\"lead\">\r\n                Sorry, that page does not exist.\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;\r\n","import React, { Component } from 'react'\r\n\r\nclass Test extends Component {\r\n\r\n    state = {\r\n        title: ''\r\n    };\r\n\r\n    componentDidMount(){\r\n               \r\n\r\n        fetch('https://jsonplaceholder.typicode.com/posts/1')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    title: data.title,\r\n                    body: data.body\r\n                })\r\n            })\r\n    }\r\n    render() {\r\n        const { title, body } = this.state;\r\n\r\n        return (\r\n            <div className=\"card card-body\">\r\n                \r\n                <h1>{title}</h1>\r\n                <div className=\"card-body\">\r\n                    {body}                    \r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Test;","import React, { Component } from 'react'\r\nimport { Consumer } from '../../context';\r\nimport TextInputgroup from \"../layout/TextInputgroup\";\r\nimport axios from 'axios';\r\n\r\nclass EditContact extends Component {\r\n    state = {\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\",\r\n        errors:{}\r\n    }\r\n\r\n    onChange = (event) => this.setState({[event.target.name]: event.target.value})\r\n\r\n    onSubmit = async (dispatch, e) => {\r\n        e.preventDefault();\r\n        console.log(this.state)\r\n        const { name, email, phone } = this.state;\r\n\r\n        if(name === ''){\r\n            this.setState({errors: {name: 'Name is required'}});\r\n            return;\r\n        }\r\n\r\n        if(email === ''){\r\n            this.setState({errors: {email: 'Email is required'}});\r\n            return;\r\n        }\r\n\r\n        if(phone === ''){\r\n            this.setState({errors: {phone: 'Phone is required'}});\r\n            return;\r\n        }\r\n\r\n        const { id } = this.props.match.params;\r\n\r\n        // Create a contact object\r\n        const updateContact = {\r\n            name: name,\r\n            email: email,\r\n            phone: phone\r\n        }\r\n\r\n        \r\n\r\n        const res = await axios.put(`https://jsonplaceholder.typicode.com/users/${id}`, updateContact)\r\n        console.log(res.data)\r\n        dispatch({type: 'UPDATE_CONTACT', payload: res.data});\r\n        // return;\r\n\r\n        // Clear state after submitting form\r\n        this.setState({\r\n            name: '',\r\n            email: '',\r\n            phone: '',\r\n            errors: {}\r\n        });\r\n        \r\n        this.props.history.push('/');\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const { id } = this.props.match.params;\r\n        const res = await axios.get(`https://jsonplaceholder.typicode.com/users/${id}`);\r\n        \r\n        const contact = res.data;\r\n\r\n        this.setState({\r\n            name: contact.name,\r\n            email: contact.email,\r\n            phone: contact.phone,\r\n            errors: {}\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { name, email, phone, errors } = this.state;\r\n\r\n        return (\r\n            <Consumer>\r\n                {\r\n                    value => {\r\n                        const { dispatch } = value;\r\n                        return (\r\n                            <div className=\"card mb-3\">\r\n                                <div className=\"card-header\">Update Contact</div>\r\n                                <div className=\"card-body\">\r\n                                    <form onSubmit={this.onSubmit.bind(this, dispatch)}>\r\n\r\n                                        <TextInputgroup \r\n                                            label=\"Name\" \r\n                                            value={name} \r\n                                            name=\"name\" \r\n                                            placeholder=\"Enter name\" \r\n                                            onChange={this.onChange} \r\n                                            error= {errors.name}\r\n                                        />\r\n\r\n                                        <TextInputgroup \r\n                                            label=\"Email\"  \r\n                                            value={email} \r\n                                            name=\"email\" \r\n                                            type=\"email\"\r\n                                            placeholder=\"Enter email\" \r\n                                            onChange={this.onChange} \r\n                                            error= {errors.email}\r\n                                        />\r\n\r\n                                        <TextInputgroup \r\n                                            label=\"Phone\"  \r\n                                            value={phone} \r\n                                            name=\"phone\" \r\n                                            placeholder=\"Enter phone\" \r\n                                            onChange={this.onChange} \r\n                                            error= {errors.phone}\r\n                                        />\r\n                                        {/* <div className=\"form-group\">\r\n                                            <label htmlFor=\"name\">Name</label>\r\n                                            <input \r\n                                                value={name} \r\n                                                id=\"name\" \r\n                                                type=\"text\" \r\n                                                name=\"name\" \r\n                                                placeholder=\"Enter name\" \r\n                                                className=\"form-control form-control-lg\" \r\n                                                onChange={this.onChange} />\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"email\">Email</label>\r\n                                            <input \r\n                                                value={email} \r\n                                                id=\"email\" \r\n                                                type=\"email\" \r\n                                                name=\"email\" \r\n                                                placeholder=\"Enter email\" \r\n                                                className=\"form-control form-control-lg\" \r\n                                                onChange={this.onChange} />\r\n                                        </div>\r\n                                        <div className=\"form-group\">\r\n                                            <label htmlFor=\"phone\">Phone</label>\r\n                                            <input \r\n                                                value={phone} \r\n                                                id=\"phone\" \r\n                                                type=\"text\" \r\n                                                name=\"phone\" \r\n                                                placeholder=\"Enter phone\" \r\n                                                className=\"form-control form-control-lg\" \r\n                                                onChange={this.onChange} />\r\n                                        </div> */}\r\n                                        <input type=\"submit\" value=\"Update Contact\" className=\"btn btn-light btn-block\" />\r\n                                    </form>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    }\r\n                }\r\n            </Consumer>\r\n        )\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default EditContact;\r\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom'\nimport './App.css';\nimport { Provider } from './context';\n\nimport Contacts from './components/contacts/Contacts';\nimport Header from './components/layout/Header';\nimport AddContact from './components/contacts/AddContact';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport About from './components/pages/About';\nimport NotFound from './components/pages/NotFound';\nimport Test from './components/pages/Test';\nimport EditContact from './components/contacts/EditContact';\n\nfunction App() {\n  const branding = \"Contact Manager\";\n  return (\n    <Provider>\n      <Router>\n        <div>\n          <Header branding={branding} />\n\n          <div className=\"container\">\n            <Switch>\n              <Route exact path=\"/\" component={Contacts}></Route>\n              <Route exact path=\"/contact/add\" component={AddContact}></Route>\n              <Route exact path=\"/contact/edit/:id\" component={EditContact}></Route>\n              <Route exact path=\"/about\" component={About}></Route>\n              <Route exact path=\"/test\" component={Test}></Route>\n              <Route component={NotFound}></Route>              \n            </Switch>\n          </div>\n        </div>\n      </Router>\n      \n    </Provider>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}